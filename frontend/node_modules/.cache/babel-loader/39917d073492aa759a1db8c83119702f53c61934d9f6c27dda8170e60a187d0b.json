{"ast":null,"code":"import axios from 'axios';\n\n// Base API configuration\nconst API_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Token service\nexport const tokenService = {\n  // Get trending tokens\n  getTrending: async (blockchain, limit = 10, offset = 0) => {\n    try {\n      const response = await axios.get(`${API_URL}/tokens/trending`, {\n        params: {\n          blockchain,\n          limit,\n          offset\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching trending tokens:', error);\n      throw error;\n    }\n  },\n  // Search tokens\n  searchTokens: async (query, blockchain, limit = 10, offset = 0) => {\n    try {\n      const response = await axios.get(`${API_URL}/tokens/search`, {\n        params: {\n          q: query,\n          blockchain,\n          limit,\n          offset\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching tokens:', error);\n      throw error;\n    }\n  },\n  // Get token details\n  getTokenDetails: async (contractAddress, blockchain) => {\n    try {\n      const response = await axios.get(`${API_URL}/tokens/${contractAddress}`, {\n        params: {\n          blockchain\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching token details:', error);\n      throw error;\n    }\n  },\n  // Analyze token security\n  analyzeTokenSecurity: async (contractAddress, blockchain) => {\n    try {\n      const response = await axios.get(`${API_URL}/tokens/${contractAddress}/security`, {\n        params: {\n          blockchain\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing token security:', error);\n      throw error;\n    }\n  }\n};\n\n// Wallet service\nexport const walletService = {\n  // Get wallet transactions\n  getWalletTransactions: async (address, blockchain, limit = 10) => {\n    try {\n      const response = await axios.get(`${API_URL}/wallets/${address}/transactions`, {\n        params: {\n          blockchain,\n          limit\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching wallet transactions:', error);\n      throw error;\n    }\n  },\n  // Track wallet\n  trackWallet: async (address, blockchain, label, isWhale, isInfluencer) => {\n    try {\n      const response = await axios.post(`${API_URL}/wallets/track`, {\n        address,\n        blockchain,\n        label,\n        isWhale,\n        isInfluencer\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error tracking wallet:', error);\n      throw error;\n    }\n  },\n  // Get wallet stats\n  getWalletStats: async (address, blockchain) => {\n    try {\n      const response = await axios.get(`${API_URL}/wallets/${address}/stats`, {\n        params: {\n          blockchain\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching wallet stats:', error);\n      throw error;\n    }\n  },\n  // Get smart money wallets\n  getSmartMoneyWallets: async (blockchain, category, limit = 10, offset = 0) => {\n    try {\n      const response = await axios.get(`${API_URL}/wallets/smart-money`, {\n        params: {\n          blockchain,\n          category,\n          limit,\n          offset\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching smart money wallets:', error);\n      throw error;\n    }\n  }\n};\n\n// Trading service\nexport const tradingService = {\n  // Get user's trading bots\n  getUserBots: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/trading/bots`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user bots:', error);\n      throw error;\n    }\n  },\n  // Get bot details\n  getBotDetails: async botId => {\n    try {\n      const response = await axios.get(`${API_URL}/trading/bots/${botId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching bot details:', error);\n      throw error;\n    }\n  },\n  // Create trading bot\n  createBot: async botData => {\n    try {\n      const response = await axios.post(`${API_URL}/trading/bots`, botData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating bot:', error);\n      throw error;\n    }\n  },\n  // Stop bot\n  stopBot: async botId => {\n    try {\n      const response = await axios.post(`${API_URL}/trading/bots/${botId}/stop`);\n      return response.data;\n    } catch (error) {\n      console.error('Error stopping bot:', error);\n      throw error;\n    }\n  },\n  // Start bot\n  startBot: async botId => {\n    try {\n      const response = await axios.post(`${API_URL}/trading/bots/${botId}/start`);\n      return response.data;\n    } catch (error) {\n      console.error('Error starting bot:', error);\n      throw error;\n    }\n  },\n  // Get user transactions\n  getUserTransactions: async (limit = 10, offset = 0, status, type, blockchain) => {\n    try {\n      const response = await axios.get(`${API_URL}/trading/transactions`, {\n        params: {\n          limit,\n          offset,\n          status,\n          type,\n          blockchain\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user transactions:', error);\n      throw error;\n    }\n  },\n  // Execute manual transaction\n  executeTransaction: async transactionData => {\n    try {\n      const response = await axios.post(`${API_URL}/trading/execute`, transactionData);\n      return response.data;\n    } catch (error) {\n      console.error('Error executing transaction:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","tokenService","getTrending","blockchain","limit","offset","response","get","params","data","error","console","searchTokens","query","q","getTokenDetails","contractAddress","analyzeTokenSecurity","walletService","getWalletTransactions","address","trackWallet","label","isWhale","isInfluencer","post","getWalletStats","getSmartMoneyWallets","category","tradingService","getUserBots","getBotDetails","botId","createBot","botData","stopBot","startBot","getUserTransactions","status","type","executeTransaction","transactionData"],"sources":["/Users/nardortheaiwhisperer/Workspace/memecoin_trading_pro/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Base API configuration\nconst API_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Token service\nexport const tokenService = {\n  // Get trending tokens\n  getTrending: async (blockchain, limit = 10, offset = 0) => {\n    try {\n      const response = await axios.get(`${API_URL}/tokens/trending`, {\n        params: { blockchain, limit, offset },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching trending tokens:', error);\n      throw error;\n    }\n  },\n  \n  // Search tokens\n  searchTokens: async (query, blockchain, limit = 10, offset = 0) => {\n    try {\n      const response = await axios.get(`${API_URL}/tokens/search`, {\n        params: { q: query, blockchain, limit, offset },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching tokens:', error);\n      throw error;\n    }\n  },\n  \n  // Get token details\n  getTokenDetails: async (contractAddress, blockchain) => {\n    try {\n      const response = await axios.get(`${API_URL}/tokens/${contractAddress}`, {\n        params: { blockchain },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching token details:', error);\n      throw error;\n    }\n  },\n  \n  // Analyze token security\n  analyzeTokenSecurity: async (contractAddress, blockchain) => {\n    try {\n      const response = await axios.get(`${API_URL}/tokens/${contractAddress}/security`, {\n        params: { blockchain },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing token security:', error);\n      throw error;\n    }\n  },\n};\n\n// Wallet service\nexport const walletService = {\n  // Get wallet transactions\n  getWalletTransactions: async (address, blockchain, limit = 10) => {\n    try {\n      const response = await axios.get(`${API_URL}/wallets/${address}/transactions`, {\n        params: { blockchain, limit },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching wallet transactions:', error);\n      throw error;\n    }\n  },\n  \n  // Track wallet\n  trackWallet: async (address, blockchain, label, isWhale, isInfluencer) => {\n    try {\n      const response = await axios.post(`${API_URL}/wallets/track`, {\n        address,\n        blockchain,\n        label,\n        isWhale,\n        isInfluencer,\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error tracking wallet:', error);\n      throw error;\n    }\n  },\n  \n  // Get wallet stats\n  getWalletStats: async (address, blockchain) => {\n    try {\n      const response = await axios.get(`${API_URL}/wallets/${address}/stats`, {\n        params: { blockchain },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching wallet stats:', error);\n      throw error;\n    }\n  },\n  \n  // Get smart money wallets\n  getSmartMoneyWallets: async (blockchain, category, limit = 10, offset = 0) => {\n    try {\n      const response = await axios.get(`${API_URL}/wallets/smart-money`, {\n        params: { blockchain, category, limit, offset },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching smart money wallets:', error);\n      throw error;\n    }\n  },\n};\n\n// Trading service\nexport const tradingService = {\n  // Get user's trading bots\n  getUserBots: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/trading/bots`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user bots:', error);\n      throw error;\n    }\n  },\n  \n  // Get bot details\n  getBotDetails: async (botId) => {\n    try {\n      const response = await axios.get(`${API_URL}/trading/bots/${botId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching bot details:', error);\n      throw error;\n    }\n  },\n  \n  // Create trading bot\n  createBot: async (botData) => {\n    try {\n      const response = await axios.post(`${API_URL}/trading/bots`, botData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating bot:', error);\n      throw error;\n    }\n  },\n  \n  // Stop bot\n  stopBot: async (botId) => {\n    try {\n      const response = await axios.post(`${API_URL}/trading/bots/${botId}/stop`);\n      return response.data;\n    } catch (error) {\n      console.error('Error stopping bot:', error);\n      throw error;\n    }\n  },\n  \n  // Start bot\n  startBot: async (botId) => {\n    try {\n      const response = await axios.post(`${API_URL}/trading/bots/${botId}/start`);\n      return response.data;\n    } catch (error) {\n      console.error('Error starting bot:', error);\n      throw error;\n    }\n  },\n  \n  // Get user transactions\n  getUserTransactions: async (limit = 10, offset = 0, status, type, blockchain) => {\n    try {\n      const response = await axios.get(`${API_URL}/trading/transactions`, {\n        params: { limit, offset, status, type, blockchain },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user transactions:', error);\n      throw error;\n    }\n  },\n  \n  // Execute manual transaction\n  executeTransaction: async (transactionData) => {\n    try {\n      const response = await axios.post(`${API_URL}/trading/execute`, transactionData);\n      return response.data;\n    } catch (error) {\n      console.error('Error executing transaction:', error);\n      throw error;\n    }\n  },\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,MAAM;;AAEvD;AACA,OAAO,MAAMC,YAAY,GAAG;EAC1B;EACAC,WAAW,EAAE,MAAAA,CAAOC,UAAU,EAAEC,KAAK,GAAG,EAAE,EAAEC,MAAM,GAAG,CAAC,KAAK;IACzD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGV,OAAO,kBAAkB,EAAE;QAC7DW,MAAM,EAAE;UAAEL,UAAU;UAAEC,KAAK;UAAEC;QAAO;MACtC,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,YAAY,EAAE,MAAAA,CAAOC,KAAK,EAAEV,UAAU,EAAEC,KAAK,GAAG,EAAE,EAAEC,MAAM,GAAG,CAAC,KAAK;IACjE,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGV,OAAO,gBAAgB,EAAE;QAC3DW,MAAM,EAAE;UAAEM,CAAC,EAAED,KAAK;UAAEV,UAAU;UAAEC,KAAK;UAAEC;QAAO;MAChD,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAK,eAAe,EAAE,MAAAA,CAAOC,eAAe,EAAEb,UAAU,KAAK;IACtD,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGV,OAAO,WAAWmB,eAAe,EAAE,EAAE;QACvER,MAAM,EAAE;UAAEL;QAAW;MACvB,CAAC,CAAC;MACF,OAAOG,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAO,oBAAoB,EAAE,MAAAA,CAAOD,eAAe,EAAEb,UAAU,KAAK;IAC3D,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGV,OAAO,WAAWmB,eAAe,WAAW,EAAE;QAChFR,MAAM,EAAE;UAAEL;QAAW;MACvB,CAAC,CAAC;MACF,OAAOG,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,aAAa,GAAG;EAC3B;EACAC,qBAAqB,EAAE,MAAAA,CAAOC,OAAO,EAAEjB,UAAU,EAAEC,KAAK,GAAG,EAAE,KAAK;IAChE,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGV,OAAO,YAAYuB,OAAO,eAAe,EAAE;QAC7EZ,MAAM,EAAE;UAAEL,UAAU;UAAEC;QAAM;MAC9B,CAAC,CAAC;MACF,OAAOE,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAW,WAAW,EAAE,MAAAA,CAAOD,OAAO,EAAEjB,UAAU,EAAEmB,KAAK,EAAEC,OAAO,EAAEC,YAAY,KAAK;IACxE,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMV,KAAK,CAAC6B,IAAI,CAAC,GAAG5B,OAAO,gBAAgB,EAAE;QAC5DuB,OAAO;QACPjB,UAAU;QACVmB,KAAK;QACLC,OAAO;QACPC;MACF,CAAC,CAAC;MACF,OAAOlB,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAgB,cAAc,EAAE,MAAAA,CAAON,OAAO,EAAEjB,UAAU,KAAK;IAC7C,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGV,OAAO,YAAYuB,OAAO,QAAQ,EAAE;QACtEZ,MAAM,EAAE;UAAEL;QAAW;MACvB,CAAC,CAAC;MACF,OAAOG,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAiB,oBAAoB,EAAE,MAAAA,CAAOxB,UAAU,EAAEyB,QAAQ,EAAExB,KAAK,GAAG,EAAE,EAAEC,MAAM,GAAG,CAAC,KAAK;IAC5E,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGV,OAAO,sBAAsB,EAAE;QACjEW,MAAM,EAAE;UAAEL,UAAU;UAAEyB,QAAQ;UAAExB,KAAK;UAAEC;QAAO;MAChD,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMmB,cAAc,GAAG;EAC5B;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMxB,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGV,OAAO,eAAe,CAAC;MAC3D,OAAOS,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAqB,aAAa,EAAE,MAAOC,KAAK,IAAK;IAC9B,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGV,OAAO,iBAAiBmC,KAAK,EAAE,CAAC;MACpE,OAAO1B,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAuB,SAAS,EAAE,MAAOC,OAAO,IAAK;IAC5B,IAAI;MACF,MAAM5B,QAAQ,GAAG,MAAMV,KAAK,CAAC6B,IAAI,CAAC,GAAG5B,OAAO,eAAe,EAAEqC,OAAO,CAAC;MACrE,OAAO5B,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAyB,OAAO,EAAE,MAAOH,KAAK,IAAK;IACxB,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMV,KAAK,CAAC6B,IAAI,CAAC,GAAG5B,OAAO,iBAAiBmC,KAAK,OAAO,CAAC;MAC1E,OAAO1B,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA0B,QAAQ,EAAE,MAAOJ,KAAK,IAAK;IACzB,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMV,KAAK,CAAC6B,IAAI,CAAC,GAAG5B,OAAO,iBAAiBmC,KAAK,QAAQ,CAAC;MAC3E,OAAO1B,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA2B,mBAAmB,EAAE,MAAAA,CAAOjC,KAAK,GAAG,EAAE,EAAEC,MAAM,GAAG,CAAC,EAAEiC,MAAM,EAAEC,IAAI,EAAEpC,UAAU,KAAK;IAC/E,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGV,OAAO,uBAAuB,EAAE;QAClEW,MAAM,EAAE;UAAEJ,KAAK;UAAEC,MAAM;UAAEiC,MAAM;UAAEC,IAAI;UAAEpC;QAAW;MACpD,CAAC,CAAC;MACF,OAAOG,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA8B,kBAAkB,EAAE,MAAOC,eAAe,IAAK;IAC7C,IAAI;MACF,MAAMnC,QAAQ,GAAG,MAAMV,KAAK,CAAC6B,IAAI,CAAC,GAAG5B,OAAO,kBAAkB,EAAE4C,eAAe,CAAC;MAChF,OAAOnC,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}